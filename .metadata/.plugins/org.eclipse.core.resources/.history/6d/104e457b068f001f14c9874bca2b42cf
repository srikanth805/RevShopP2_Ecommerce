package com.example.client_app.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.http.ResponseCookie;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.client.RestTemplate;
//import org.springframework.web.reactive.function.server.ServerRequest;
//import org.springframework.web.reactive.function.server.ServerResponse;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.server.ServerWebExchange;

import com.example.client_app.model.LoginModel;
import com.example.client_app.model.LoginResponse;

import reactor.core.publisher.Mono;

//import jakarta.servlet.http.Cookie;
//import jakarta.servlet.http.HttpServletResponse;
//import jakarta.servlet.http.HttpSession;

@Controller
@RequestMapping("/api/v1/login")
public class LoginController {

    @Autowired
    private RestTemplate restTemplate;
    
    @Autowired
    private WebClient.Builder webClientBuilder;

    @GetMapping
    public String showLoginForm(Model model) {
        model.addAttribute("login", new LoginModel());
        return "Login";
    }

    @PostMapping
    public Mono<String> processLogin(@ModelAttribute("login") LoginModel loginModel, Model model, ServerWebExchange exchange) {
//        try {
//            LoginResponse res = restTemplate.postForObject("http://localhost:8090/api/v1/login", loginModel, LoginResponse.class);
//            if (res != null) {
//                Integer fetchedUserId = res.getId();
//                
//                ResponseCookie cookie = ResponseCookie.from("userId", fetchedUserId.toString())
//                        .httpOnly(true)
//                        .path("/")
//                        .build();
//                ServerResponse.ok()
//                .cookie(cookie);
//                Cookie cookie = new Cookie("userId", fetchedUserId.toString());
//                cookie.setMaxAge(24 * 60 * 60);
//                cookie.setHttpOnly(true);
//                
//                session.setAttribute("userId", fetchedUserId);
//
//                if ("buyer".equals(res.getRole())) {
//                	response.addCookie(cookie);
//                    return "redirect:/api/v1/buyer-dashboard";
//                } else if ("seller".equals(res.getRole())) {
//                	session.setAttribute("sellerid", res.getId());
//                	Cookie cookie2 = new Cookie("sellerid", fetchedUserId.toString());
//                    cookie.setMaxAge(24 * 60 * 60);
//                    cookie.setHttpOnly(true);
//                    response.addCookie(cookie2);
//                    return "redirect:/api/v1/seller";
//                } else {
//                    model.addAttribute("error", "Unknown user role.");
//                    return "Login";
//                }
//            } else {
//                model.addAttribute("error", "Invalid email or password.");
//                return "Login";
//            }
//        } catch (Exception e) {
//            model.addAttribute("error", "An error occurred during login. Please try again.");
//            return "Login";
//        }
    	return webClientBuilder.build()
                .post()
                .uri("http://localhost:8090/api/v1/login")
                .bodyValue(loginModel)
                .retrieve()
                .bodyToMono(LoginResponse.class)
                .flatMap(res -> {
                    if (res != null) {
                        Integer fetchedUserId = res.getId();
                        
                        if ("buyer".equals(res.getRole())) {
                        	ResponseCookie userIdCookie = ResponseCookie.from("userId", fetchedUserId.toString())
                        			.httpOnly(true) 
                        			.path("/")     
                        			.maxAge(24 * 60 * 60)  
                        			.build();
                        	
                        	
                        	exchange.getResponse().addCookie(userIdCookie);
                            return Mono.just("redirect:/api/v1/buyer-dashboard");
                        } else if ("seller".equals(res.getRole())) {
                            return Mono.just("redirect:/api/v1/seller");
                        } else {
                            model.addAttribute("error", "Unknown user role.");
                            return Mono.just("Login");
                        }
                    } else {
                        model.addAttribute("error", "Invalid email or password.");
                        return Mono.just("Login");
                    }
                })
                .onErrorResume(e -> {
                    model.addAttribute("error", "An error occurred during login. Please try again.");
                    return Mono.just("Login");
                });
    }
}
