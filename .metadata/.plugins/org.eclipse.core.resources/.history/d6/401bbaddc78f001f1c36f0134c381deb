//package com.revshop.userservice.controllertest;
//
//
//import com.revshop.userservice.controller.UserController;
//import com.revshop.userservice.entity.SellerModel;
//import com.revshop.userservice.entity.UserModel;
//import com.revshop.userservice.service.UserService;
//import org.junit.jupiter.api.BeforeEach;
//import org.junit.jupiter.api.Test;
//import org.mockito.InjectMocks;
//import org.mockito.Mock;
//import org.mockito.MockitoAnnotations;
//import org.springframework.http.HttpStatus;
//import org.springframework.http.ResponseEntity;
//import org.springframework.ui.Model;
//
//import static org.junit.jupiter.api.Assertions.assertEquals;
//import static org.mockito.Mockito.*;
//
//class UserControllerTest {
//
//    @InjectMocks
//    private UserController userController;
//
//    @Mock
//    private UserService userService;
//
//    @Mock
//    private Model model;
//
//    @BeforeEach
//    void setUp() {
//        MockitoAnnotations.openMocks(this);
//    }
//
//
//    @Test
//    void testShowRegistrationForm() {
//        // Create a UserModel instance similar to the controller
//        UserModel expectedUser = new UserModel();
//        expectedUser.setSellermodel(new SellerModel()); 
//
//        when(userService.saveUser(any(UserModel.class))).thenReturn(expectedUser);
//
//        String viewName = userController.showRegistrationForm(model);
//
//        assertEquals("Register", viewName);
//        verify(model).addAttribute(eq("user"), argThat(user -> {
//            // Check that the user object has the same structure as expected
//            return user instanceof UserModel 
//                    && ((UserModel) user).getSellermodel() instanceof SellerModel;
//        }));
//    }
//
//
//    @Test
//    void testProcessRegistration_SellerMissingDetails() {
//        UserModel userModel = new UserModel();
//        userModel.setUserRole("seller"); // Set role as seller, but no seller details
//        userModel.setSellermodel(null); // Simulate missing seller details
//
//        ResponseEntity<String> result = userController.processRegistration(userModel);
//        
//        assertEquals("Register", result);
//        assertEquals(HttpStatus.CREATED);
//        verify(model, times(1)).addAttribute("error", "Seller details are missing");
//    }
//
//    @Test
//    void testProcessRegistration_Buyer() {
//        UserModel userModel = new UserModel();
//        userModel.setUserRole("buyer");
//        userModel.setWalletBalance(0.0); // Ensure the initial balance is set to zero
//
//        String result = userController.processRegistration(userModel, model);
//        
//        assertEquals("redirect:/api/v1/login", result);
//        verify(userService, times(1)).saveUser(userModel);
//        assertEquals(5500.0, userModel.getWalletBalance());
//    }
//}

package com.revshop.userservice.controllertest;

import com.revshop.userservice.controller.UserController;
import com.revshop.userservice.entity.SellerModel;
import com.revshop.userservice.entity.UserModel;
import com.revshop.userservice.service.UserService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.ui.Model;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

class UserControllerTest {

    @InjectMocks
    private UserController userController;

    @Mock
    private UserService userService;

    @Mock
    private Model model;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testProcessRegistration_SellerMissingDetails() {
        // Simulating a user with the role of 'seller', but with missing seller details
        UserModel userModel = new UserModel();
        userModel.setUserRole("seller");
        userModel.setSellermodel(null); // Simulate missing seller details

        // Call the method under test and check for a bad request response
        ResponseEntity<String> result = userController.processRegistration(userModel);

        // Assert that the response status is BAD_REQUEST (400)
        assertEquals(HttpStatus.BAD_REQUEST, result.getStatusCode());

        // Assert that the response body is empty (as indicated in your controller)
        assertEquals("", result.getBody());
    }


//
   @Test
    void testProcessRegistration_Buyer() {
        // Simulating a user with the role of 'buyer'
        UserModel userModel = new UserModel();
        userModel.setUserRole("buyer");
        userModel.setWalletBalance(0.0); // Ensure the initial balance is set to zero

        // Mock the service call to return the userModel object when saved
        when(userService.saveUser(any(UserModel.class))).thenReturn(userModel);

        // Call the controller method
        ResponseEntity<String> result = userController.processRegistration(userModel);

        // Assert that the response status is OK (200)
        assertEquals(HttpStatus.OK, result.getStatusCode());

        // Assert that the response body contains the success message
        assertEquals("User registred successfully", result.getBody());

        // Verify that saveUser was called once
        verify(userService, times(1)).saveUser(userModel);

        // Assert that the wallet balance is updated correctly
        assertEquals(5500.0, userModel.getWalletBalance());
    }

}

